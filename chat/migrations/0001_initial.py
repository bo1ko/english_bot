# Generated by Django 5.1.4 on 2024-12-27 20:35

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=562)),
                ('description', models.TextField()),
                ('image_url', models.ImageField(blank=True, null=True, upload_to='images/')),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=562)),
                ('answer', models.TextField()),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
            },
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rule', models.TextField()),
            ],
            options={
                'verbose_name': 'Rule',
                'verbose_name_plural': 'Rules',
            },
        ),
        migrations.CreateModel(
            name='TelegramUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tg_id', models.BigIntegerField()),
                ('username', models.CharField(blank=True, max_length=264, null=True)),
                ('first_name', models.CharField(blank=True, max_length=264, null=True)),
                ('last_name', models.CharField(blank=True, max_length=264, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=264, null=True)),
            ],
            options={
                'verbose_name': 'TelegramUser',
                'verbose_name_plural': 'TelegramUsers',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('student', 'Student'), ('teacher', 'Teacher'), ('site_administrator', 'Site Administrator'), ('super_administrator', 'Super Administrator')], default='student', max_length=20)),
                ('student_list', models.JSONField(blank=True, default=list, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('telegram', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user', to='chat.telegramuser')),
            ],
            options={
                'verbose_name': 'CustomUser',
                'verbose_name_plural': 'CustomUsers',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='StudentAndTeacherChat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admin_list', models.JSONField(blank=True, null=True)),
                ('messages', models.JSONField(blank=True, default=list, null=True)),
                ('student', models.ForeignKey(limit_choices_to={'role': 'student'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='student_teacher_chats', to=settings.AUTH_USER_MODEL)),
                ('teacher', models.ForeignKey(limit_choices_to={'role': 'teacher'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teacher_student_chats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student And Teacher Chat',
                'verbose_name_plural': 'Student And Teacher Chats',
            },
        ),
        migrations.CreateModel(
            name='TeacherAndAdminChat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admin_list', models.JSONField(blank=True, null=True)),
                ('messages', models.JSONField(blank=True, default=list, null=True)),
                ('admin', models.ForeignKey(limit_choices_to={'role': 'super_administrator'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='admin_teacher_chats', to=settings.AUTH_USER_MODEL)),
                ('teacher', models.ForeignKey(limit_choices_to={'role': 'teacher'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teacher_admin_chats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Teacher And Admin Chat',
                'verbose_name_plural': 'Teacher And Admin Chats',
            },
        ),
        migrations.CreateModel(
            name='SystemAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.JSONField(blank=True, default=list, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('telegram', models.ForeignKey(default=None, on_delete=django.db.models.deletion.SET_DEFAULT, to='chat.telegramuser')),
            ],
            options={
                'verbose_name': 'System Action',
                'verbose_name_plural': 'System Actions',
            },
        ),
        migrations.CreateModel(
            name='TelegramUserAndAdminChat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admin_list', models.JSONField(blank=True, default=list, null=True)),
                ('messages', models.JSONField(blank=True, default=list, null=True)),
                ('admin', models.ForeignKey(limit_choices_to={'role': 'super_administrator'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='admin_student_chats', to=settings.AUTH_USER_MODEL)),
                ('telegram_user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='telegram_user_admin_chats', to='chat.telegramuser')),
            ],
            options={
                'verbose_name': 'Telegram User And Admin Chat',
                'verbose_name_plural': 'Telegram User And Admin Chats',
            },
        ),
    ]
