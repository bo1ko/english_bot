from aiogram import Bot, Router, F
from aiogram.filters import CommandStart, Command, or_f
from aiogram.types import Message, FSInputFile, CallbackQuery, InputMediaPhoto, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from twisted.python.test.deprecatedattributes import message

import django_setup
from telegram_bot.core import db_request
from telegram_bot.core.keyboards import get_callback_btns, request_contact
from telegram_bot.core.middlewares import CheckAndAddUserMiddleware
from telegram_bot.core.websocket_request import send_to_websocket
from telegram_bot.core.utils import get_contact_info

# routers
router = Router()
router.message.middleware(CheckAndAddUserMiddleware())

main_btns = {
    "–ü—Ä–æ –Ω–∞—à—É —à–∫–æ–ª—É ‚ù§Ô∏è": "about",
    "–ù–∞—à—ñ –∫—É—Ä—Å–∏ üíª": "courses",
    "–ù–∞–π–ø–æ—à–∏—Ä–µ–Ω—ñ—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è ü§î": "questions",
    "–ü—Ä–∞–≤–∏–ª–∞ —à–∫–æ–ª–∏ üìú": "rules",
    "–ù–∞–ø–∏—Å–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤—ñ üë®üèª‚Äçüíª": "admin",
}

admin_btn = {
    "–ù–∞–ø–∏—Å–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤—ñ üë®üèª‚Äçüíª": "admin",
}

back_btn = {
    "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è": "back",
}

back_to_menu = {
    "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†": "back",
}


# handlers


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await db_request.create_system_action(
        await db_request.get_telegram_user(message.from_user.id), "/start"
    )
    photo = FSInputFile("media/images/placeholder-image.jpg", filename="image.jpg")
    text = "–ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"

    await message.answer_photo(
        photo=photo,
        caption=text,
        reply_markup=get_callback_btns(btns=main_btns, sizes=(1,)),
    )


@router.callback_query(F.data == "back")
async def cmd_back(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await db_request.create_system_action(
        await db_request.get_telegram_user(callback.from_user.id), "/start"
    )
    photo = FSInputFile("media/images/placeholder-image.jpg", filename="image.jpg")
    text = "–ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"

    await callback.message.delete()
    await callback.message.answer_photo(
        photo=photo,
        caption=text,
        reply_markup=get_callback_btns(btns=main_btns, sizes=(1,)),
    )


@router.callback_query(or_f(F.data == "questions", F.data == "back_to_questions"))
async def questions(callback: CallbackQuery):
    btns = await db_request.get_questions_btns()
    btns.update(back_btn)

    await callback.message.delete()
    await callback.message.answer(
        text="–ü–æ–ø—É–ª—è—Ä–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è",
        reply_markup=get_callback_btns(btns=btns, sizes=(1,)),
    )


@router.message(Command("questions"))
async def questions(message: Message, state: FSMContext):
    await state.clear()
    btns = await db_request.get_questions_btns()
    btns.update(back_btn)

    await message.delete()
    await message.answer(
        text="–ü–æ–ø—É–ª—è—Ä–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è",
        reply_markup=get_callback_btns(btns=btns, sizes=(1,)),
    )


@router.callback_query(F.data.startswith("question_"))
async def question_info(callback: CallbackQuery, bot: Bot):
    question_id = callback.data.split("_")[1]
    question = await db_request.get_question(int(question_id))
    btns = {}

    btns.update(admin_btn)
    btns["–ù–∞–∑–∞–¥ –¥–æ –ø–∏—Ç–∞–Ω—å ‚¨Ö"] = "back_to_questions"
    btns["–ù–∞–∑–∞–¥ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ‚¨ÖÔ∏è"] = "back"

    await callback.message.edit_text(
        text=f"{question.question}\n\n{question.answer}",
        reply_markup=get_callback_btns(btns=btns, sizes=(1,)),
    )


@router.callback_query(or_f(F.data == "courses", F.data == "back_to_courses"))
async def courses(callback: CallbackQuery, bot: Bot):
    btns = await db_request.get_courses_btns()
    btns.update(back_btn)

    await callback.message.delete()
    await callback.message.answer(
        text="–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É —ñ –¥—ñ–∑–Ω–∞–π—Ç–µ—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫—É—Ä—Å–∏ üëá",
        reply_markup=get_callback_btns(btns=btns, sizes=(1,)),
    )


@router.message(Command("courses"))
async def courses(message: Message, state: FSMContext):
    await state.clear()
    btns = await db_request.get_courses_btns()
    btns.update(back_btn)

    await message.delete()
    await message.answer(
        text="–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É —ñ –¥—ñ–∑–Ω–∞–π—Ç–µ—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫—É—Ä—Å–∏ üëá",
        reply_markup=get_callback_btns(btns=btns, sizes=(1,)),
    )


@router.callback_query(F.data.startswith("course_"))
async def course_info(callback: CallbackQuery, bot: Bot):
    course_id = callback.data.split("_")[1]

    course = await db_request.get_course(int(course_id))
    text = f"{course.name}\n\n{course.description}"
    btns = {
        "–î–ª—è –¥–æ—Ä–æ—Å–ª–∏—Ö üë®‚Äçü¶∞üë©‚Äçü¶≥": f"course_{course_id}_adults",
        "–î–ª—è –ø—ñ–¥–ª—ñ—Ç–∫—ñ–≤ üßë‚Äçü¶±üë©‚Äçü¶±": f"course_{course_id}_children",
        "–î–ª—è –¥—ñ—Ç–µ–π üë¶üëß": f"course_{course_id}_kids",
        "–ù–∞–∑–∞–¥ –¥–æ –∫—É—Ä—Å—ñ–≤ ‚¨ÖÔ∏è": "back_to_courses",
        "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚¨ÖÔ∏è": "back",
    }

    await bot.edit_message_media(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        media=InputMediaPhoto(
            media=FSInputFile(course.image_url.path, filename="image.jpg"),
            caption=text,
        ),
        reply_markup=get_callback_btns(btns=btns, sizes=(1,)),
    )


@router.callback_query(F.data == "about")
async def cmd_about(callback: CallbackQuery, bot: Bot):
    text = """
    –ú–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –æ–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞ UKnow. üá∫üá¶–ü—Ä–∞—Ü—é—î–º–æ –∑ 2022 —Ä–æ–∫—É —ñ –¥–æ–ø–æ–º–∞–≥–∞—î–º–æ —É–∫—Ä–∞—ó–Ω—Ü—è–º –≤ —Ä—ñ–∑–Ω–∏—Ö –∫—É—Ç–æ—á–∫–∞—Ö —Å–≤—ñ—Ç—É –æ–≤–æ–ª–æ–¥—ñ—Ç–∏ –º–æ–≤–æ—é —ñ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏—Å—è –≤ —Å—É—Å–ø—ñ–ª—å—Å—Ç–≤–æ. –°—å–æ–≥–æ–¥–Ω—ñ –º–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —É—Ä–æ–∫–∏ –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó, —ñ—Å–ø–∞–Ω—Å—å–∫–æ—ó, –ø–æ–ª—å—Å—å–∫–æ—ó, —Ñ—Ä–∞–Ω—Ü—É–∑—å–∫–æ—ó, —ñ—Ç–∞–ª—ñ–π—Å—å–∫–æ—ó, —á–µ—Å—å–∫–æ—ó, —Å–ª–æ–≤–∞—Ü—å–∫–æ—ó, –Ω—ñ–º–µ—Ü—å–∫–æ—ó —Ç–∞ —Ç—É—Ä–µ—Ü—å–∫–æ—ó –º–æ–≤ üåé

–ú–∏ –≤–∂–µ –≤–∏–ø—É—Å—Ç–∏–ª–∏ –±—ñ–ª—å—à–µ 4000 —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ üéâ

–ù–∞—à—ñ –≤–∏–∫–ª–∞–¥–∞—á—ñ –ø—Ä–æ—Ö–æ–¥—è—Ç—å 4 –µ—Ç–∞–ø–∏ –≤—ñ–¥–±–æ—Ä—É, –ø–µ—Ä–µ–¥ —Ç–∏–º —è–∫ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç–∏ –¥–æ –∑–∞–Ω—è—Ç—å. 

–ú–∏ –º–æ–∂–µ–º–æ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –í–∞—Å –¥–æ –µ–∫–∑–∞–º–µ–Ω—ñ–≤ –Ω–∞ –∑–Ω–∞–Ω–Ω—è –º–æ–≤–∏, –¥–æ –µ–∫–∑–∞–º–µ–Ω—É –Ω–∞ –≤—Å—Ç—É–ø —É –í–ù–ó, –¥–æ–ø–æ–º–æ–≥—Ç–∏ –í–∞–º –∑–∞–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑–∞ 36 —É—Ä–æ–∫—ñ–≤, –∞–±–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–π–≤–∏—â—É –æ—Ü—ñ–Ω–∫—É –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.üéØ
    """
    image_path = FSInputFile("media/images/placeholder-image.jpg")
    btns = {}
    btns.update(admin_btn)
    btns.update(back_btn)

    await bot.edit_message_media(
        media=InputMediaPhoto(media=image_path, caption=text),
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=get_callback_btns(btns=btns, sizes=(1,)),
    )


@router.message(Command("about"))
async def cmd_about(message: Message, bot: Bot, state: FSMContext):
    await state.clear()
    text = """
    –ú–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –æ–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞ UKnow. üá∫üá¶–ü—Ä–∞—Ü—é—î–º–æ –∑ 2022 —Ä–æ–∫—É —ñ –¥–æ–ø–æ–º–∞–≥–∞—î–º–æ —É–∫—Ä–∞—ó–Ω—Ü—è–º –≤ —Ä—ñ–∑–Ω–∏—Ö –∫—É—Ç–æ—á–∫–∞—Ö —Å–≤—ñ—Ç—É –æ–≤–æ–ª–æ–¥—ñ—Ç–∏ –º–æ–≤–æ—é —ñ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏—Å—è –≤ —Å—É—Å–ø—ñ–ª—å—Å—Ç–≤–æ. –°—å–æ–≥–æ–¥–Ω—ñ –º–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —É—Ä–æ–∫–∏ –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó, —ñ—Å–ø–∞–Ω—Å—å–∫–æ—ó, –ø–æ–ª—å—Å—å–∫–æ—ó, —Ñ—Ä–∞–Ω—Ü—É–∑—å–∫–æ—ó, —ñ—Ç–∞–ª—ñ–π—Å—å–∫–æ—ó, —á–µ—Å—å–∫–æ—ó, —Å–ª–æ–≤–∞—Ü—å–∫–æ—ó, –Ω—ñ–º–µ—Ü—å–∫–æ—ó —Ç–∞ —Ç—É—Ä–µ—Ü—å–∫–æ—ó –º–æ–≤ üåé

–ú–∏ –≤–∂–µ –≤–∏–ø—É—Å—Ç–∏–ª–∏ –±—ñ–ª—å—à–µ 4000 —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ üéâ

–ù–∞—à—ñ –≤–∏–∫–ª–∞–¥–∞—á—ñ –ø—Ä–æ—Ö–æ–¥—è—Ç—å 4 –µ—Ç–∞–ø–∏ –≤—ñ–¥–±–æ—Ä—É, –ø–µ—Ä–µ–¥ —Ç–∏–º —è–∫ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç–∏ –¥–æ –∑–∞–Ω—è—Ç—å. 

–ú–∏ –º–æ–∂–µ–º–æ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –í–∞—Å –¥–æ –µ–∫–∑–∞–º–µ–Ω—ñ–≤ –Ω–∞ –∑–Ω–∞–Ω–Ω—è –º–æ–≤–∏, –¥–æ –µ–∫–∑–∞–º–µ–Ω—É –Ω–∞ –≤—Å—Ç—É–ø —É –í–ù–ó, –¥–æ–ø–æ–º–æ–≥—Ç–∏ –í–∞–º –∑–∞–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑–∞ 36 —É—Ä–æ–∫—ñ–≤, –∞–±–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–π–≤–∏—â—É –æ—Ü—ñ–Ω–∫—É –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.üéØ
    """
    image_path = FSInputFile("media/images/placeholder-image.jpg")
    btns = {}
    btns.update(admin_btn)
    btns.update(back_btn)

    await bot.edit_message_media(
        media=InputMediaPhoto(media=image_path, caption=text),
        chat_id=message.chat.id,
        message_id=message.message_id,
        reply_markup=get_callback_btns(btns=btns, sizes=(1,)),
    )


class AdminMessage(StatesGroup):
    message = State()


class TeacherMessage(StatesGroup):
    message = State()


@router.callback_query(F.data == "admin")
async def admin(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer()

    is_registered = await db_request.check_registration(callback.from_user.id)
    if is_registered is None:
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤—ñ—Ä—Ü—ñ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é...")
        return
    elif is_registered is False:
        await callback.message.answer("–î–ª—è –ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å üëå")
        await registration(callback.message)
    else:
        await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó",
                                      reply_markup=get_callback_btns(btns=back_to_menu))
        await state.set_state(AdminMessage.message)


@router.message(Command("admin"))
async def cmd_admin(message: Message, state: FSMContext, loop=False):
    if loop:
        await state.clear()
    else:
        is_registered = await db_request.check_registration(message.from_user.id)
        if is_registered is None:
            await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤—ñ—Ä—Ü—ñ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é...")
            return
        elif is_registered:
            await message.answer("–î–ª—è –ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å üëå")
            await registration(message)

            return

        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó",
                                 reply_markup=get_callback_btns(btns=back_to_menu))
    await state.set_state(AdminMessage.message)


@router.message(AdminMessage.message)
async def cmd_admin_first(message: Message, state: FSMContext):
    chat_with = "telegram_user"
    obj_tg_user = await db_request.get_telegram_user(message.from_user.id)

    obj_chat, chat_created = await db_request.get_or_create_communication_chat(
        obj_tg_user, chat_with
    )

    if chat_created is None:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —á–∞—Ç.")
        return

    socket_result = await send_to_websocket(
        obj_chat.pk,
        obj_tg_user.pk,
        message.text,
        message.message_id,
        chat_with=chat_with,
    )

    if socket_result:
        await message.answer("–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó.",
                             reply_markup=get_callback_btns(btns=back_to_menu))
        await cmd_admin(message, state, loop=True)
    else:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó.",
                             reply_markup=get_callback_btns(btns=back_to_menu))


@router.message(Command("teacher"))
async def cmd_teacher(message: Message, state: FSMContext, loop=False):
    if loop:
        await state.clear()
    else:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—á–∏—Ç–µ–ª—è")

    await state.set_state(TeacherMessage.message)


@router.message(TeacherMessage.message)
async def cmd_teacher_first(message: Message, state: FSMContext):
    chat_with = "student"
    obj_tg_user = await db_request.get_telegram_user(message.from_user.id)

    obj_chat, chat_created = await db_request.get_or_create_communication_chat(
        obj_tg_user, chat_with
    )

    if chat_created is None:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —á–∞—Ç.")
        return

    socket_result = await send_to_websocket(
        obj_chat.pk,
        obj_tg_user.pk,
        message.text,
        message.message_id,
        chat_with=chat_with,
    )

    if socket_result:
        await message.answer("–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—á–∏—Ç–µ–ª—é.")
        await cmd_teacher(message, state, loop=True)
    else:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—á–∏—Ç–µ–ª—é.")


@router.callback_query(or_f(F.data == "rules"))
async def rules(callback: CallbackQuery):
    text = "–ü—Ä–∞–≤–∏–ª–∞ —à–∫–æ–ª–∏ üö®\n–∑ –ø–æ–≤–Ω–∏–º –ø–µ—Ä–µ–ª—ñ–∫–æ–º –ø—Ä–∞–≤–∏–ª —Ä–æ–±–æ—Ç–∏ —à–∫–æ–ª–∏ –≤–∏ –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è —É –¥–æ–≥–æ–≤–æ—Ä—ñ —è–∫–∏–π –≤–∞–º –Ω–∞–¥–∞–≤ –≤–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä ‚úÖ\n–î–ª—è –≤–∞—à–æ—ó –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –¥–æ–¥–∞—î–º–æ —Å—é–¥–∏ –æ—Å–Ω–æ–≤–Ω—ñ –º–æ–º–µ–Ω—Ç–∏:\n\n"
    text += await db_request.get_rules_txt()

    btns = {}
    btns.update(admin_btn)
    btns.update(back_btn)

    await callback.message.delete()
    await callback.message.answer(
        text=text,
        reply_markup=get_callback_btns(btns=btns, sizes=(1,)),
    )


@router.message(Command("rules"))
async def rules(message: Message, state: FSMContext):
    await state.clear()
    text = "–ü—Ä–∞–≤–∏–ª–∞ —à–∫–æ–ª–∏ üö®\n–∑ –ø–æ–≤–Ω–∏–º –ø–µ—Ä–µ–ª—ñ–∫–æ–º –ø—Ä–∞–≤–∏–ª —Ä–æ–±–æ—Ç–∏ —à–∫–æ–ª–∏ –≤–∏ –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è —É –¥–æ–≥–æ–≤–æ—Ä—ñ —è–∫–∏–π –≤–∞–º –Ω–∞–¥–∞–≤ –≤–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä ‚úÖ\n–î–ª—è –≤–∞—à–æ—ó –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –¥–æ–¥–∞—î–º–æ —Å—é–¥–∏ –æ—Å–Ω–æ–≤–Ω—ñ –º–æ–º–µ–Ω—Ç–∏:\n\n"
    text += await db_request.get_rules_txt()

    btns = {}
    btns.update(admin_btn)
    btns.update(back_btn)

    await message.delete()
    await message.answer(
        text=text,
        reply_markup=get_callback_btns(btns=btns, sizes=(1,)),
    )


@router.message(Command("registration"))
async def registration(message: Message):
    await message.answer('–ù–∞–¥–∞–π—Ç–µ —Å–≤–æ—ó –∫–æ–Ω—Ç–∞–∫—Å—Ç–∏ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó üëá',
                         reply_markup=request_contact('–ù–∞–¥–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ'))


@router.message(F.contact)
async def registration_result(message: Message, state: FSMContext):
    result = await get_contact_info(message)
    if result:
        await message.answer('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!', reply_markup=ReplyKeyboardRemove())
        await cmd_admin(message, state, True)
